// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUM DEFINITIONS
// ============================================

enum UserRole {
  ADMIN
  AFFILIATE
  BUYER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  UNPAID
  PAID
  PENDING
  EXPIRED
  FAILED
  REFUNDED
}

// Xendit Payment Methods
enum PaymentMethod {
  BANK_TRANSFER        // Virtual Account
  COD                  // Cash on Delivery (kept for backward compatibility)
  EWALLET              // E-Wallet (OVO, Dana, LinkAja, ShopeePay)
  CREDIT_CARD          // Kartu Kredit/Debit (Lokal & International)
  QRIS                 // QRIS
  RETAIL_OUTLET        // Alfamart, Indomaret
  CARDLESS_CREDIT      // Kredivo, Akulaku
  DIRECT_DEBIT         // Direct Debit
  PAYLATER             // Pay Later
}

// Xendit Payment Channels
enum PaymentChannel {
  // Credit Card
  CREDIT_CARD
  
  // Virtual Account Banks
  BCA
  BNI
  BRI
  MANDIRI
  PERMATA
  BSI
  BJB
  CIMB
  SAHABAT_SAMPOERNA
  
  // E-Wallets
  OVO
  DANA
  LINKAJA
  SHOPEEPAY
  ASTRAPAY
  JENIUSPAY
  
  // QRIS
  QRIS
  
  // Retail
  ALFAMART
  INDOMARET
  
  // Cardless Credit
  KREDIVO
  AKULAKU
  UANGME
  
  // Direct Debit
  DD_BRI
  DD_BCA_KLIKPAY
  
  // International Cards
  VISA
  MASTERCARD
  JCB
  AMEX
}

enum XenditInvoiceStatus {
  PENDING
  PAID
  SETTLED
  EXPIRED
}

enum CommissionStatus {
  PENDING
  APPROVED
  PAID
  REJECTED
}

enum NotificationType {
  ORDER_CREATED
  ORDER_PAID
  ORDER_SHIPPED
  ORDER_DELIVERED
  COMMISSION_EARNED
  COMMISSION_PAID
  AFFILIATE_APPROVED
  PAYMENT_PENDING
  PAYMENT_EXPIRED
  PAYMENT_FAILED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum MaterialType {
  BANNER
  PRODUCT_PHOTO
  COPYWRITING
  VIDEO
  GUIDELINE
}

enum MaterialStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

// ============================================
// USER MANAGEMENT
// ============================================

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String
  name          String
  phone         String?
  role          UserRole    @default(BUYER)
  status        UserStatus  @default(ACTIVE)
  emailVerified Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  affiliate     Affiliate?
  addresses     Address[]
  orders        Order[]
  carts         Cart[]
  wishlist      Wishlist?
  notifications Notification[]
  materialDownloads MaterialDownload[]

  @@index([email])
  @@index([role, status])
  @@map("users")
}

// ============================================
// AFFILIATE SYSTEM
// ============================================

model Affiliate {
  id                String      @id @default(cuid())
  userId            String      @unique
  status            UserStatus  @default(PENDING)
  referralCode      String      @unique
  commissionRate    Decimal     @default(5.0)
  monthlyGoal       Int         @default(10)
  totalClicks       Int         @default(0)
  totalOrders       Int         @default(0)
  totalSales        Decimal     @default(0)
  totalCommission   Decimal     @default(0)
  paidCommission    Decimal     @default(0)
  pendingCommission Decimal     @default(0)
  rank              Int?
  joinedAt          DateTime    @default(now())
  approvedAt        DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Bank Info for Payout
  bankName        String?
  accountNumber   String?
  accountName     String?

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders            Order[]
  clicks            AffiliateClick[]
  commissions       Commission[]
  payouts           Payout[]
  materialDownloads MaterialDownload[]

  @@index([referralCode])
  @@index([rank])
  @@index([status]) 
  @@index([totalOrders])
  @@map("affiliates")
}

model AffiliateClick {
  id          String    @id @default(cuid())
  affiliateId String
  ipAddress   String?
  userAgent   String?
  referer     String?
  clickedAt   DateTime  @default(now())

  // Relations
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  @@index([affiliateId, clickedAt])
  @@map("affiliate_clicks")
}

// ============================================
// PRODUCT MANAGEMENT
// ============================================

model Product {
  id            String        @id @default(cuid())
  sku           String        @unique
  name          String
  slug          String        @unique
  description   String?       @db.Text
  price         Decimal
  comparePrice  Decimal?
  stock         Int           @default(0)
  weight        Float?
  status        ProductStatus @default(ACTIVE)
  category      String
  images        String[]
  featured      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]

  @@index([status, featured])
  @@index([category, status])
  @@index([slug])
  @@map("products")
}

// ============================================
// WISHLIST MANAGEMENT
// ============================================

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]

  @@map("wishlists")
}

model WishlistItem {
  id          String    @id @default(cuid())
  wishlistId  String
  productId   String
  productSku  String
  productName String
  price       Decimal
  image       String?
  createdAt   DateTime  @default(now())

  wishlist    Wishlist  @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([wishlistId])
  @@index([productId])
  @@map("wishlist_items")
}

// ============================================
// COMMISSION & PAYOUT MANAGEMENT
// ============================================

model Commission {
  id              String           @id @default(cuid())
  affiliateId     String
  orderId         String?
  amount          Decimal
  status          CommissionStatus @default(PENDING)
  approvedAt      DateTime?
  paidAt          DateTime?
  paidAmount      Decimal?
  paymentNote     String?
  rejectedReason  String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  affiliate       Affiliate        @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  order           Order?           @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([affiliateId, status])
  @@index([status])
  @@index([orderId])
  @@map("commissions")
}

model Payout {
  id             String   @id @default(cuid())
  affiliateId    String
  amount         Decimal
  status         String   @default("PENDING")
  requestedAt    DateTime @default(now())
  paidAt         DateTime?
  referenceCode  String?
  note           String?

  affiliate Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  @@index([affiliateId, status])
  @@map("payouts")
}

// ============================================
// ADDRESS MANAGEMENT
// ============================================

model Address {
  id         String   @id @default(cuid())
  userId     String
  fullName   String
  phone      String
  address    String
  city       String
  state      String
  postalCode String
  country    String   @default("Indonesia")
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("addresses")
}

model ShippingMethod {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String?
  price          Decimal  @db.Decimal(10, 2)
  estimatedDays  Int
  minOrderAmount Decimal? @db.Decimal(10, 2)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  orders         Order[]

  @@map("shipping_methods")
}

// ============================================
// ORDER MANAGEMENT (XENDIT INTEGRATION)
// ============================================

model Order {
  id                String         @id @default(cuid())
  orderNumber       String         @unique
  userId            String
  affiliateId       String?
  status            OrderStatus    @default(PENDING)
  paymentStatus     PaymentStatus  @default(UNPAID)
  
  // Xendit Payment Info
  xenditInvoiceId   String?        @unique  // ID Invoice dari Xendit
  xenditInvoiceUrl  String?                  // URL pembayaran untuk customer
  xenditExternalId  String?        @unique  // External ID (biasanya orderNumber)
  paymentMethod     PaymentMethod?           // Metode pembayaran yang dipilih
  paymentChannel    PaymentChannel?          // Channel spesifik (BCA, OVO, dll)
  
  // Order Details
  subtotal          Decimal        @db.Decimal(10, 2)
  shippingCost      Decimal        @db.Decimal(10, 2)
  tax               Decimal        @db.Decimal(10, 2)
  total             Decimal        @db.Decimal(10, 2)
  currency          String         @default("IDR")
  
  // Shipping Info
  shippingMethodId  String
  shippingAddress   String         @db.Text
  trackingNumber    String?
  
  // Additional Info
  notes             String?        @db.Text
  customerEmail     String?
  customerPhone     String?
  
  // Timestamps
  paidAt            DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  expiredAt         DateTime?      // Untuk payment expiry
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  user              User           @relation(fields: [userId], references: [id])
  affiliate         Affiliate?     @relation(fields: [affiliateId], references: [id], onDelete: SetNull)
  shippingMethod    ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  items             OrderItem[]
  commissions       Commission[]
  payments          Payment[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
  @@index([affiliateId])
  @@index([xenditInvoiceId])
  @@index([xenditExternalId])
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  productName String
  productSku  String
  price       Decimal  @db.Decimal(10, 2)
  quantity    Int
  variant     String?
  weight      String?
  subtotal    Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// ============================================
// PAYMENT TRACKING (XENDIT)
// ============================================

model Payment {
  id                  String        @id @default(cuid())
  orderId             String
  
  // Xendit Payment Details
  xenditInvoiceId     String        @unique
  xenditPaymentId     String?       @unique  // ID dari payment callback
  xenditExternalId    String
  
  // Payment Info
  amount              Decimal       @db.Decimal(10, 2)
  currency            String        @default("IDR")
  paymentMethod       PaymentMethod
  paymentChannel      PaymentChannel?
  status              PaymentStatus @default(PENDING)
  
  // Transaction Details
  paidAmount          Decimal?      @db.Decimal(10, 2)
  payerEmail          String?
  paymentDestination  String?       // VA number, QRIS merchant, dll
  
  // Fee Information
  xenditFee           Decimal?      @db.Decimal(10, 2)
  
  // Callback Data
  callbackData        Json?         // Raw callback dari Xendit
  failureReason       String?
  
  // Timestamps
  paidAt              DateTime?
  expiredAt           DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relations
  order               Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([xenditInvoiceId])
  @@index([xenditPaymentId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}

// ============================================
// XENDIT WEBHOOK LOG
// ============================================

model XenditWebhookLog {
  id              String   @id @default(cuid())
  event           String   // invoice.paid, invoice.expired, dll
  xenditInvoiceId String?
  payload         Json     // Full webhook payload
  processed       Boolean  @default(false)
  processedAt     DateTime?
  errorMessage    String?  @db.Text
  createdAt       DateTime @default(now())

  @@index([xenditInvoiceId])
  @@index([processed])
  @@index([createdAt])
  @@map("xendit_webhook_logs")
}

// ============================================
// CART MANAGEMENT
// ============================================

model Cart {
  id        String     @id @default(cuid())
  userId    String
  status    String     @default("ACTIVE")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@unique([userId, status])
  @@index([userId])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  variant   String?
  weight    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId, variant, weight])
  @@index([cartId])
  @@index([productId])
  @@map("cart_items")
}

// ============================================
// SETTINGS MANAGEMENT
// ============================================

model Setting {
  id          String       @id @default(cuid())
  key         String       @unique
  value       String       @db.Text
  type        SettingType  @default(STRING)
  description String?
  updatedAt   DateTime     @updatedAt

  @@map("settings")
}

// ============================================
// BLOG / CMS
// ============================================

model BlogPost {
  id          String   @id @default(cuid())
  sanityId    String   @unique
  slug        String   @unique
  title       String
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([published])
  @@map("blog_posts")
}

// ============================================
// NOTIFICATIONS
// ============================================

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String           @db.Text
  data        Json?
  read        Boolean          @default(false)
  delivered   Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())

  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
  @@map("notifications")
}

// ============================================
// MARKETING MATERIALS
// ============================================

model MarketingMaterial {
  id            String         @id @default(cuid())
  type          MaterialType
  status        MaterialStatus @default(ACTIVE)
  title         String
  slug          String         @unique
  description   String?
  category      String?
  fileUrl       String?
  thumbnailUrl  String?
  fileSize      Int?
  fileFormat    String?
  width         Int?
  height        Int?
  duration      Int?
  content       String?        @db.Text
  tags          String[]       @default([])
  sortOrder     Int            @default(0)
  downloadCount Int            @default(0)
  viewCount     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  publishedAt   DateTime?

  downloads     MaterialDownload[]

  @@index([type, status])
  @@index([slug])
  @@index([publishedAt])
  @@map("marketing_materials")
}

model MaterialDownload {
  id           String            @id @default(cuid())
  materialId   String
  userId       String
  affiliateId  String?
  ipAddress    String?
  userAgent    String?
  downloadedAt DateTime          @default(now())

  material     MarketingMaterial @relation(fields: [materialId], references: [id], onDelete: Cascade)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  affiliate    Affiliate?        @relation(fields: [affiliateId], references: [id], onDelete: SetNull)

  @@index([materialId])
  @@index([userId])
  @@index([affiliateId])
  @@index([downloadedAt])
  @@map("material_downloads")
}